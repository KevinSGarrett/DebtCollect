1) Relations (12)
addresses.debtor_id               -> debtors.id
phones.debtor_id                  -> debtors.id
emails.debtor_id                  -> debtors.id
bankruptcy_cases.debtor_id        -> debtors.id
properties.debtor_id              -> debtors.id
enrichment_runs.debtor_id         -> debtors.id
scoring_snapshots.debtor_id       -> debtors.id
debtor_businesses.debtor_id       -> debtors.id
debtor_businesses.business_id     -> businesses.id
debtors.standardized_address_id   -> addresses.id
debtors.best_phone_id             -> phones.id
debtors.best_email_id             -> emails.id


FK policy (current): ON DELETE NO ACTION / ON UPDATE NO ACTION for all above.



-- =========================================================
-- Tables
-- =========================================================

CREATE TABLE IF NOT EXISTS public.debtors (
  id                         integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  first_name                 varchar(255),
  last_name                  varchar(255),
  full_name                  varchar(255),
  address_line1              varchar(255),
  address_line2              varchar(255),
  city                       varchar(255),
  state                      varchar(255),
  zip                        varchar(10),
  debt_owed                  numeric(14,2),
  currency                   varchar(255),
  source                     varchar(255),
  usps_standardized          boolean DEFAULT false,
  standardized_address_id    integer,
  age                        integer,
  dob                        date,
  best_phone_id              integer,
  best_email_id              integer,
  business_confidence        integer,
  collectibility_score       integer,
  collectibility_reason      text,
  enrichment_status          varchar(255) DEFAULT 'pending',
  last_enriched_at           timestamp without time zone,
  flags                      text,
  raw_notes                  text,
  created_at                 timestamp without time zone,
  updated_at                 timestamp without time zone
);

CREATE TABLE IF NOT EXISTS public.addresses (
  id                integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  debtor_id         integer NOT NULL,
  line1             varchar(255),
  line2             varchar(255),
  city              varchar(255),
  state             varchar(255),
  zip5              varchar(5),
  zip4              varchar(255),
  dpv_confirmation  varchar(255),
  carrier_route     varchar(255),
  confidence        integer,
  provenance        varchar(255),
  raw_payload       text,
  created_at        timestamp without time zone
);

CREATE TABLE IF NOT EXISTS public.phones (
  id                   integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  debtor_id            integer NOT NULL,
  phone_e164           varchar(255),
  line_type            varchar(255),
  carrier_name         varchar(255),
  first_seen           date,
  last_seen            date,
  rpv_status           varchar(255),
  rpv_confidence       integer,
  twilio_status        varchar(255),
  verification_score   integer,
  is_verified          boolean,
  match_strength       integer,
  provenance           varchar(255),
  raw_payload          text,
  created_at           timestamp without time zone
);

CREATE TABLE IF NOT EXISTS public.emails (
  id              integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  debtor_id       integer NOT NULL,
  email           varchar(255),
  hunter_status   varchar(255),
  hunter_score    integer,
  first_seen      date,
  last_seen       date,
  is_verified     boolean,
  match_strength  integer,
  provenance      varchar(255),
  raw_payload     text,
  created_at      timestamp without time zone
);

CREATE TABLE IF NOT EXISTS public.bankruptcy_cases (
  id              integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  debtor_id       integer NOT NULL,
  case_number     varchar(255),
  court           varchar(255),
  chapter         varchar(255),
  filed_date      date,
  status          varchar(255),
  discharge_date  date,
  assets          numeric(14,2),
  liabilities     numeric(14,2),
  docket_url      varchar(255),
  source          varchar(255),
  confidence      integer,
  raw_payload     text,
  last_checked_at timestamp without time zone
);

CREATE TABLE IF NOT EXISTS public.properties (
  id               integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  debtor_id        integer NOT NULL,
  address_line1    varchar(255),
  address_line2    varchar(255),
  city             varchar(255),
  state            varchar(255),
  zip              varchar(255),
  attom_property_id varchar(255),
  market_value     numeric(14,2),
  assessed_value   numeric(14,2),
  tax_year         integer,
  annual_tax       numeric(14,2),
  owner_occupied   boolean,
  value_source     varchar(255),
  raw_payload      text,
  last_checked_at  timestamp without time zone
);

CREATE TABLE IF NOT EXISTS public.businesses (
  id               integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name             varchar(255),
  address_line1    varchar(255),
  city             varchar(255),
  state            varchar(255),
  zip              varchar(10),
  phone            varchar(255),
  website          varchar(255),
  google_place_id  varchar(255),
  apollo_id        varchar(255),
  active           boolean,
  raw_payload      text
);

CREATE TABLE IF NOT EXISTS public.debtor_businesses (
  id           integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  debtor_id    integer NOT NULL,
  business_id  integer NOT NULL,
  role         varchar(255),
  confidence   integer
);

CREATE TABLE IF NOT EXISTS public.enrichment_runs (
  id            integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  debtor_id     integer NOT NULL,
  started_at    timestamp without time zone,
  finished_at   timestamp without time zone,
  status        varchar(255),
  stage_results text,
  errors        text,
  duration_ms   integer
);

CREATE TABLE IF NOT EXISTS public.scoring_snapshots (
  id         integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  debtor_id  integer NOT NULL,
  score      integer,
  reason     text,
  inputs     text,
  created_at timestamp without time zone
);

-- =========================================================
-- Foreign Keys (NO ACTION as per current state)
-- =========================================================

ALTER TABLE public.addresses           DROP CONSTRAINT IF EXISTS addresses_debtor_id_foreign;
ALTER TABLE public.addresses           ADD  CONSTRAINT addresses_debtor_id_foreign
  FOREIGN KEY (debtor_id) REFERENCES public.debtors(id) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE public.phones              DROP CONSTRAINT IF EXISTS phones_debtor_id_foreign;
ALTER TABLE public.phones              ADD  CONSTRAINT phones_debtor_id_foreign
  FOREIGN KEY (debtor_id) REFERENCES public.debtors(id) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE public.emails              DROP CONSTRAINT IF EXISTS emails_debtor_id_foreign;
ALTER TABLE public.emails              ADD  CONSTRAINT emails_debtor_id_foreign
  FOREIGN KEY (debtor_id) REFERENCES public.debtors(id) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE public.bankruptcy_cases    DROP CONSTRAINT IF EXISTS bankruptcy_cases_debtor_id_foreign;
ALTER TABLE public.bankruptcy_cases    ADD  CONSTRAINT bankruptcy_cases_debtor_id_foreign
  FOREIGN KEY (debtor_id) REFERENCES public.debtors(id) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE public.properties          DROP CONSTRAINT IF EXISTS properties_debtor_id_foreign;
ALTER TABLE public.properties          ADD  CONSTRAINT properties_debtor_id_foreign
  FOREIGN KEY (debtor_id) REFERENCES public.debtors(id) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE public.enrichment_runs     DROP CONSTRAINT IF EXISTS enrichment_runs_debtor_id_foreign;
ALTER TABLE public.enrichment_runs     ADD  CONSTRAINT enrichment_runs_debtor_id_foreign
  FOREIGN KEY (debtor_id) REFERENCES public.debtors(id) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE public.scoring_snapshots   DROP CONSTRAINT IF EXISTS scoring_snapshots_debtor_id_foreign;
ALTER TABLE public.scoring_snapshots   ADD  CONSTRAINT scoring_snapshots_debtor_id_foreign
  FOREIGN KEY (debtor_id) REFERENCES public.debtors(id) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE public.debtor_businesses   DROP CONSTRAINT IF EXISTS debtor_businesses_debtor_id_foreign;
ALTER TABLE public.debtor_businesses   ADD  CONSTRAINT debtor_businesses_debtor_id_foreign
  FOREIGN KEY (debtor_id)   REFERENCES public.debtors(id)     ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE public.debtor_businesses   DROP CONSTRAINT IF EXISTS debtor_businesses_business_id_foreign;
ALTER TABLE public.debtor_businesses   ADD  CONSTRAINT debtor_businesses_business_id_foreign
  FOREIGN KEY (business_id) REFERENCES public.businesses(id)  ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE public.debtors             DROP CONSTRAINT IF EXISTS debtors_best_phone_id_foreign;
ALTER TABLE public.debtors             ADD  CONSTRAINT debtors_best_phone_id_foreign
  FOREIGN KEY (best_phone_id) REFERENCES public.phones(id)     ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE public.debtors             DROP CONSTRAINT IF EXISTS debtors_best_email_id_foreign;
ALTER TABLE public.debtors             ADD  CONSTRAINT debtors_best_email_id_foreign
  FOREIGN KEY (best_email_id) REFERENCES public.emails(id)     ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE public.debtors             DROP CONSTRAINT IF EXISTS debtors_standardized_address_id_foreign;
ALTER TABLE public.debtors             ADD  CONSTRAINT debtors_standardized_address_id_foreign
  FOREIGN KEY (standardized_address_id) REFERENCES public.addresses(id) ON DELETE NO ACTION ON UPDATE NO ACTION;

-- Child FK columns are NOT NULL
ALTER TABLE public.phones            ALTER COLUMN debtor_id SET NOT NULL;
ALTER TABLE public.emails            ALTER COLUMN debtor_id SET NOT NULL;
ALTER TABLE public.addresses         ALTER COLUMN debtor_id SET NOT NULL;
ALTER TABLE public.bankruptcy_cases  ALTER COLUMN debtor_id SET NOT NULL;
ALTER TABLE public.properties        ALTER COLUMN debtor_id SET NOT NULL;
ALTER TABLE public.enrichment_runs   ALTER COLUMN debtor_id SET NOT NULL;
ALTER TABLE public.scoring_snapshots ALTER COLUMN debtor_id SET NOT NULL;
ALTER TABLE public.debtor_businesses ALTER COLUMN debtor_id   SET NOT NULL;
ALTER TABLE public.debtor_businesses ALTER COLUMN business_id SET NOT NULL;

-- =========================================================
-- CHECK Constraints (data-format guards)
-- =========================================================

-- Phones: E.164 (+15551234567), min 8 and max 15 digits after '+'
ALTER TABLE public.phones
  DROP CONSTRAINT IF EXISTS chk_phones_e164,
  ADD  CONSTRAINT chk_phones_e164 CHECK (phone_e164 ~ '^\+[1-9][0-9]{7,14}$');

-- State must be 2 chars
ALTER TABLE public.debtors
  DROP CONSTRAINT IF EXISTS chk_debtors_state2,
  ADD  CONSTRAINT chk_debtors_state2 CHECK (char_length(state) = 2);

ALTER TABLE public.addresses
  DROP CONSTRAINT IF EXISTS chk_addresses_state2,
  ADD  CONSTRAINT chk_addresses_state2 CHECK (char_length(state) = 2);

-- Debtors.zip: 5 or 9 with hyphen
ALTER TABLE public.debtors
  DROP CONSTRAINT IF EXISTS chk_debtors_zip,
  ADD  CONSTRAINT chk_debtors_zip CHECK (zip ~ '^[0-9]{5}(-[0-9]{4})?$');

-- Addresses zip parts
ALTER TABLE public.addresses
  DROP CONSTRAINT IF EXISTS chk_addresses_zip5,
  ADD  CONSTRAINT chk_addresses_zip5 CHECK (zip5 ~ '^[0-9]{5}$');

ALTER TABLE public.addresses
  DROP CONSTRAINT IF EXISTS chk_addresses_zip4,
  ADD  CONSTRAINT chk_addresses_zip4 CHECK (zip4 ~ '^$|^[0-9]{4}$');

-- =========================================================
-- Uniques & helper indexes
-- =========================================================

-- De-dup within debtor
ALTER TABLE public.phones
  DROP CONSTRAINT IF EXISTS uniq_phones_debtor_phone,
  ADD  CONSTRAINT uniq_phones_debtor_phone UNIQUE (debtor_id, phone_e164);

ALTER TABLE public.emails
  DROP CONSTRAINT IF EXISTS uniq_emails_debtor_email,
  ADD  CONSTRAINT uniq_emails_debtor_email UNIQUE (debtor_id, email);

-- Debtor ↔ business pair unique
ALTER TABLE public.debtor_businesses
  DROP CONSTRAINT IF EXISTS uniq_debtor_business_pair,
  ADD  CONSTRAINT uniq_debtor_business_pair UNIQUE (debtor_id, business_id);

-- Hot-path indexes
CREATE INDEX IF NOT EXISTS idx_phones_debtor_verified_lastseen ON public.phones (debtor_id, is_verified, last_seen);
CREATE INDEX IF NOT EXISTS idx_emails_debtor_verified          ON public.emails (debtor_id, is_verified);
CREATE INDEX IF NOT EXISTS idx_bankruptcy_cases_debtor_filed   ON public.bankruptcy_cases (debtor_id, filed_date);
CREATE INDEX IF NOT EXISTS idx_properties_debtor               ON public.properties (debtor_id);

-- Soft dedup aids
CREATE INDEX IF NOT EXISTS idx_businesses_lo_name_zip          ON public.businesses (LOWER(name), zip);
CREATE INDEX IF NOT EXISTS idx_addresses_candidate             ON public.addresses (debtor_id, line1, zip5);

-- =========================================================
-- Defaults / triggers
-- =========================================================

-- DB default already set for enrichment_status -> 'pending'
ALTER TABLE public.debtors ALTER COLUMN enrichment_status SET DEFAULT 'pending';

-- full_name trigger (keeps first+last in sync)
CREATE OR REPLACE FUNCTION public.set_debtors_full_name()
RETURNS trigger AS $$
BEGIN
  NEW.full_name := trim(
    coalesce(NEW.first_name,'') ||
    CASE WHEN coalesce(NEW.last_name,'') <> '' THEN ' ' || NEW.last_name ELSE '' END
  );
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS trg_set_debtors_full_name ON public.debtors;
CREATE TRIGGER trg_set_debtors_full_name
BEFORE INSERT OR UPDATE OF first_name, last_name
ON public.debtors
FOR EACH ROW
EXECUTE FUNCTION public.set_debtors_full_name();




3) Directus-facing notes (what’s configured in the app)

Collections (10): debtors, addresses, phones, emails, bankruptcy_cases, properties, businesses, debtor_businesses, enrichment_runs, scoring_snapshots.

Field interfaces

All raw_payload / JSON-like text fields use Code (JSON) interface:
addresses.raw_payload, phones.raw_payload, emails.raw_payload, bankruptcy_cases.raw_payload, properties.raw_payload, businesses.raw_payload, enrichment_runs.stage_results, enrichment_runs.errors, scoring_snapshots.inputs, debtors.flags, debtors.collectibility_reason, debtors.raw_notes.

Timestamps: created_at marked date-created, updated_at marked date-updated (where present).

debtors.enrichment_status: select-dropdown with choices pending|running|partial|complete|error, default pending.

UI validations (Directus meta)

debtors.state, addresses.state: pattern ^[A-Z]{2}$ (plus DB CHECK).

debtors.zip: pattern ^(\d{5})(-\d{4})?$ (plus DB CHECK).

addresses.zip5: ^\d{5}$, addresses.zip4: ^(|\d{4})$ (plus DB CHECK).

phones.phone_e164: E.164 ^\+[1-9]\d{7,14}$ (plus DB CHECK).

Relations (as above) are present in /relations.







